# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

defaults:
  logLevel: "debug"
  image:
    pullPolicy: "Always"
    repository: "mainfluxlabs"
    tag: "0.19.0"
    pullSecret: ""
  # Replicas of MQTT adapter, NATS, Things, Envoy and Auth
  replicaCount: 1
  natsPort: 4222
  jaegerPort: 6831

ingress:
  enabled: true
  annotations: {}
  labels: {}
  # Uncomment this block for TLS support in public ingress
  hostname: "example.com"
  # tls:
  #   hostname: ""
  #   secret: "mainflux-server"

nginxInternal:
  mtls:
    # By default mTLS is disabled. If you use mTLS, comment this block.
    tls: ""
    intermediateCrt: ""
    # Uncomment this block for TLS and mTLS support.
    # Use sh script from /secrets/secrets.sh to create config maps with your certs
    # tls: "mainflux-server"
    # intermediateCrt: "ca"

adapter_http:
  image: {}
  httpPort: 8185

adapter_coap:
  enabled: false
  image: {}
  port: 5683

notifier_smtp:
  enabled: true
  image: {}
  emailHost: "smtp.example.com"
  smtpPort: 2525
  fromName: "Mainflux"
  fromEmail: "admin@example.com"
  username: "mainflux"
  password: "mainflux"
  secret: ""
  httpPort: 8906

mqtt:
  enabled: true
  securityContext:
    runAsUser: 10000
    runAsGroup: 10000
    fsGroup: 10000
  adapter:
    image:
      repository: "mainfluxlabs/mqtt"
    mqttPort: 1884
    wsPort: 8081
    httpPort: 8285
    dbPort: 5432
    sslMode: false
    sslCert: ""
    logLevel: "debug"
    dbPort: 5432
  broker:
    image:
      repository: "mainfluxlabs/vernemq"
      tag: "0.13.2"
    mqttPort: 1883
    wsPort: 8080
    logLevel: "info"
    persistentVolume:
      size: 1Gi
  redisESPort: 6379
  redisCachePort: 6379

users:
  image: {}
  dbPort: 5432
  httpPort: 8180
  grpcPort: 8184
  adminEmail: "admin@example.com"
  adminPassword: "12345678"

things:
  image: {}
  dbPort: 5432
  httpPort: 8182
  authGrpcPort: 8183
  authHttpPort: 8989
  redisESPort: 6379
  redisCachePort: 6379

auth:
  image: {}
  dbPort: 5432
  grpcPort: 8181
  httpPort: 8189
  secret: "secret"

certs:
  enabled: false
  image: {}
  dbPort: 5432
  httpPort: 8204
  logLevel: "info"
  sdkThingsPrefix: ""
  encryptKey: ""
  clientTLS: ""
  serverCert: ""
  serverKey: ""
  signCAPath: "/etc/ssl/certs/ca.crt"
  signCAKeyPath: "/etc/ssl/certs/ca.key"
  signHoursValid: "2048h"
  signRSABits: 2048
  signVaultToken: "hvs.NLNSOryTzRMh632z8iCQJmpI"
  signVaultHost: "http://vault:8200"
  signVaultPKIPath: "pki_int"
  signVaultRole: "mainflux"

filestore:
  enabled: true
  image: {}
  dbPort: 5432
  httpPort: 9022
  secret: "secret"
  serverCert: ""
  serverKey: ""
  clientTLS: false
  dbSSLCert: ""

ui:
  image: {}
  port: 3000
  proxyAuth: false
  prefix: "ui"
  logoutUrl: "/logout"
  wsUrl: "ws://localhost/mqtt"

influxdb:
  enabled: true
  uiSubdomain: "influxdb"
  persistence:
    enabled: true
  dbPort: 8086
  writer:
    image: {}
    httpPort: 8900
  reader:
    image: {}
    httpPort: 8905
  database: "mainflux"
  auth:
    admin:
      bucket: "mainflux-bucket"
      token: "mainflux-token"
      username: "mainflux"
      password: "mainflux"
      org: "mainflux-org"
  configPath: "/config.toml"
  backup:
    enabled: false
    cronjob:
      schedule: "0 2 * * *"

mongodb:
  enabled: false
  dbPort: 27017
  writer:
    image: {}
    httpPort: 8901
  reader:
    image: {}
    httpPort: 8904
  database: "mainflux"
  authEnabled: true
  adminUser:
    name: "mainflux"
    pwd: "mainflux"
  configPath: "/subjects.toml"
  contentType: "application/senml+json"
  transformer: "json"

nats:
  auth:
    enabled: false
  clusterAuth:
    enabled: false
  maxPayload: 268435456
  replicaCount: 3

postgresqlusers:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-users
  resources:
    requests:
      cpu: 25m
  primary:
    persistence:
      size: 1Gi
  auth:
    postgresPassword: "mainflux"
    username: "postgres"
    password: "mainflux"
    database: "users"

postgresqlthings:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-things
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        cpu: 25m
  auth:
    postgresPassword: "mainflux"
    username: "postgres"
    password: "mainflux"
    database: "things"

postgresqlauth:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-auth
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        cpu: 25m
  auth:
    postgresPassword: "mainflux"
    username: "postgres"
    password: "mainflux"
    database: "auth"

postgresqlcerts:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: false
  name: postgresql-certs
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        cpu: 25m
  auth:
    postgresPassword: "mainflux"
    username: "postgres"
    password: "mainflux"
    database: "certs"

postgresqlmqtt:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-mqtt
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        cpu: 25m
  auth:
    postgresPassword: "mainflux"
    username: "postgres"
    password: "mainflux"
    database: "subscriptions"

postgresqlfilestore:
  ## If you want to use an external database, set this to false and change postgresqlHost
  enabled: true
  name: postgresql-filestore
  primary:
    persistence:
      size: 1Gi
    resources:
      requests:
        cpu: 25m
  auth:
    postgresPassword: "mainflux"
    username: "postgres"
    password: "mainflux"
    database: "filestore"

redis-streams:
  auth:
    enabled: false
  replica:
    replicaCount: 0
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false
    size: 1Gi

redis-auth:
  auth:
    enabled: false
  replica:
    replicaCount: 0
  cluster:
    enabled: false
  master:
    persistence:
      enabled: false
    size: 1Gi

jaeger-operator:
  jaeger:
    create: true
  rbac:
    pspEnabled: true
    clusterRole: true

envoy:
  image:
    pullPolicy: "IfNotPresent"
    repository: "envoyproxy/envoy"
    tag: "v1.13.0"

nginx_internal:
  image:
    pullPolicy: "IfNotPresent"
    repository: "nginx"
    tag: "1.19.1-alpine"
